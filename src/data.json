[
    {
        "id": 1,
        "title": "1.Hello World",
        "content": "const root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<h1>Hello, world!</h1>);\n\n위 코드는 페이지에 “Hello, world!”라는 제목을 보여줍니다.",
        "comments": [
            {
                "id": 11,
                "content": "오늘도 좋은 글 감사합니다!👍"
            },
            {
                "id": 12,
                "content": "리엑트 이제 시작이네요..!"
            }
        ]
    },
    {
        "id": 2,
        "title": "2.JSX 소개",
        "content": "JSX란?\nReact에서는 본질적으로 렌더링 로직이 UI 로직(이벤트가 처리되는 방식, 시간에 따라 state가 변하는 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등)과 연결된다는 사실을 받아들입니다.\n\nReact에서는 본질적으로 렌더링 로직이 UI 로직(이벤트가 처리되는 방식, 시간에 따라 state가 변하는 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등)과 연결된다는 사실을 받아들입니다.",
        "comments": [
            {
                "id": 21,
                "content": "이제야 jsx가 뭔지 조금 알겠네요!"
            },
            {
                "id": 22,
                "content": "쉬운 설명 감사드립니다😁"
            }
        ]
    },
    {
        "id": 3,
        "title": "3.엘리먼트 렌더링",
        "content": "엘리먼트는 화면에 표시할 내용을 기술합니다.\n브라우저 DOM 엘리먼트와 달리 React 엘리먼트는 일반 객체이며(plain object) 쉽게 생성할 수 있습니다.\nReact DOM은 React 엘리먼트와 일치하도록 DOM을 업데이트합니다.",
        "comments": [
            {
                "id": 31,
                "content": "뭔가 어려운 개념이었는데, 글을 읽고 조금 정리가 된 것 같습니다."
            },
            {
                "id": 32,
                "content": "앞으로는 잘 사용할 수 있을것 같아요"
            }
        ]
    },
    {
        "id": 4,
        "title": "4.Components와 Props",
        "content": "개념적으로 컴포넌트는 JavaScript 함수와 유사합니다. \n“props”라고 하는 임의의 입력을 받은 후, 화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환합니다.",
        "comments": [
            {
                "id": 41,
                "content": "헷갈렸던 개념을 확실히 이해할 수 있어서 좋네요!!"
            },
            {
                "id": 42,
                "content": "쉬운 설명 감사드려요👏"
            },
            {
                "id": 43,
                "content": "최고시다👍"
            }
        ]
    },
    {
        "id": 5,
        "title": "5.State and Lifecycle",
        "content": "함수에서 클래스로 변환하기\n\n다섯 단계로 Clock과 같은 함수 컴포넌트를 클래스로 변환할 수 있습니다.\n1.React.Component를 확장하는 동일한 이름의 ES6 class를 생성합니다.\n2.render()라고 불리는 빈 메서드를 추가합니다.\n3. 함수의 내용을 render() 메서드 안으로 옮깁니다.\n4.render() 내용 안에 있는 props를 this.props로 변경합니다.\n5.남아있는 빈 함수 선언을 삭제합니다.",
        "comments": [
            {
                "id": 51,
                "content": "초보자도 쉽게 이해할 수 있어서 좋습니다😃"
            },
            {
                "id": 52,
                "content": "오늘도 좋은 강의 감사드립니다👍👍"
            },
            {
                "id": 53,
                "content": "오 이제 여기거 보고 공부하면 될듯"
            }
        ]
    },
    {
        "id": 6,
        "title": "< Q & A >",
        "content": "비밀댓글도 좋고 일반댓글도 좋습니다.\n리액트 공부나 진로 고민 등 질문을 자유롭게 남겨주세요.\n최대한 빠른 시일 내 답변드리도록 하겠습니다.\n\n내용이 길어질 경우 아래 메일로 보내주시고\n댓글로 메일주소 남겨주시면 확인 후 회신하도록 하겠습니다.\n\nBestTeam6@gmail.com",
        "comments": [
            {
                "id": 61,
                "content": "강의 잘 듣고 있습니다~!"
            },
            {
                "id": 62,
                "content": "와 좋습니다ㅎㅎ"
            }
        ]
    }
]